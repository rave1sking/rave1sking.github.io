<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动态规划：接雨水</title>
    <link href="/2022/07/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2022/07/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="1、-题目"><a href="#1、-题目" class="headerlink" title="1、 题目"></a>1、 题目</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/">https://leetcode.cn/problems/trapping-rain-water/</a></p><h2 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h2><p>对于下标 i，<strong>下雨后水能到达的最大高度等于下标 i 左右两边的最大高度的最小值，下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去height[i]。</strong></p><p>使用动态规划的方法，可以在 O(n) 的时间内预处理得到每个位置两边的最大高度。</p><p>创建两个长度为 n的数组leftMax[n]和rightMax[n]，分别表示该位置及往左（右）的位置中，height的最大高度。</p><p>1、从左到右的遍历height数组，对于每个下标i，找到其左最高值。</p><p>首先考虑边界，leftMax[0] 即表示第0个下标的左最大值，显然是没有的，我们将其赋值为height[0]</p><p>根据动态规划的思想，遍历过程中，有leftMax[i] &#x3D; max(leftMax[i-1] , height[i]) ，其中。i∈[1, n-1]</p><p>2、从右到左遍历height数组，对于每个下标i，找到其右最高值。</p><p>依然是先考虑边界，对于右最大，rightMax显然没有右值，于是rightMax[n - 1] &#x3D; height[n - 1]</p><p>根据动态规划的思想，遍历过程中，有leftMax[i] &#x3D; max(leftMax[i-1] , height[i]) ，其中。i∈[n - 2, 0]</p><p>最后考虑接水容量，回到最初说明的，<strong>下雨后水能到达的最大高度等于下标 i 左右两边的最大高度的最小值，下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去height[i]。</strong></p><p>于是有 min(leftMax[i], rightMax[i]) - height[i]</p><p>至于为什接水两是上述公式。原理如图所示：</p><img src="/2022/07/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E6%8E%A5%E9%9B%A8%E6%B0%B4/1.png" class=""><h2 id="3、-代码实现："><a href="#3、-代码实现：" class="headerlink" title="3、 代码实现："></a>3、 代码实现：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span>  <span class="hljs-type">List</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>            n = <span class="hljs-built_in">len</span>(height)<br>            leftMax = [height[<span class="hljs-number">0</span>]] + [<span class="hljs-number">0</span>] * (n - <span class="hljs-number">1</span>)<br>            rightMax = [<span class="hljs-number">0</span>] * (n - <span class="hljs-number">1</span>) + [height[n - <span class="hljs-number">1</span>]]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>                leftMax[i] = <span class="hljs-built_in">max</span>(leftMax[i-<span class="hljs-number">1</span>], height[i])<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                rightMax[i] = <span class="hljs-built_in">max</span>(rightMax[i+<span class="hljs-number">1</span>], height[i])<br>            ans = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">min</span>(leftMax[i], rightMax[i]) - height[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))<br>            <span class="hljs-keyword">return</span> ans<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ans = Solution()<br>    <span class="hljs-built_in">print</span>(ans.trap([<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dynamic processing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FirstBlog</title>
    <link href="/2022/07/15/FirstBlog/"/>
    <url>/2022/07/15/FirstBlog/</url>
    
    <content type="html"><![CDATA[<p><strong>It’s my first blog, hoping that I can continue to accumulate and progress in the future.</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
